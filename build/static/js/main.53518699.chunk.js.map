{"version":3,"sources":["components/Person.js","components/PersonForm.js","components/Filter.js","components/Notification.js","services/persons.js","App.js","index.js"],"names":["Person","person","filterText","destroyPersonFunction","name","toLowerCase","includes","number","onClick","PersonForm","props","onSubmit","addPerson","value","newName","onChange","handleNameChange","newNumber","handleNumberChange","type","Filter","handlerFunction","Notification","message","messageType","notificationStyle","color","className","style","baseUrl","axios","get","newObject","post","id","delete","put","App","useState","persons","setPersons","setNewName","setNewNumber","setFilterText","notificationMessage","setNotificationMessage","setMessageType","useEffect","personService","then","response","data","updatePerson","window","confirm","updatedPersonId","filter","map","p","catch","error","setTimeout","event","target","preventDefault","some","console","log","concat","key","destroyPerson","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.53518699.chunk.js","sourcesContent":["import React from 'react';\n\nconst Person = ({ person, filterText, destroyPersonFunction }) =>\n  person.name.toLowerCase().includes(filterText.toLowerCase()) ?\n  <div>{person.name} {person.number} <button onClick={destroyPersonFunction}>delete</button></div> : ''\n\nexport default Person;","import React from 'react';\n\nconst PersonForm = (props) => {\n  return (\n    <form onSubmit={props.addPerson}>\n      <div>\n        name: <input value={props.newName} onChange={props.handleNameChange} />\n      </div>\n      <div>\n        number: <input value={props.newNumber} onChange={props.handleNumberChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n}\n\nexport default PersonForm;","import React from 'react';\n\nconst Filter = ({ filterText, handlerFunction }) => <div>filter shown with <input value={filterText} onChange={handlerFunction} /></div>\n\nexport default Filter;","import React from 'react';\n\nconst Notification = ({ message, messageType }) => {\n  if (message === null) {\n    return null;\n  }\n\n  const notificationStyle = {}\n  if (messageType) {\n    notificationStyle.color = 'green';\n  } else {\n    notificationStyle.color = 'red';\n  }\n\n  return (\n    <div className='notification' style={notificationStyle}>\n      {message}\n    </div>\n  )\n}\n\nexport default Notification;","import axios from 'axios';\nconst baseUrl = '/api/persons';\n\nconst getAll = () => {\n  return axios.get(baseUrl);\n}\n\nconst create = newObject => {\n  return axios.post(baseUrl, newObject);\n}\n\nconst destroy = id => {\n  return axios.delete(`${baseUrl}/${id}`);\n}\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject);\n}\n\nexport default { getAll, create, destroy, update }","import React, { useState, useEffect } from 'react';\nimport Person from './components/Person';\nimport PersonForm from './components/PersonForm';\nimport Filter from './components/Filter';\nimport Notification from './components/Notification';\nimport personService from './services/persons';\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]);\n  const [ newName, setNewName ] = useState('');\n  const [ newNumber, setNewNumber ] = useState('');\n  const [ filterText, setFilterText ] = useState('');\n  const [ notificationMessage, setNotificationMessage ] = useState(null);\n  const [ messageType, setMessageType ] = useState(true);\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(response => {\n        setPersons(response.data);\n      });\n  }, []);\n\n  const addPerson = (event) => {\n    event.preventDefault();\n    if (persons.some(person => person.name.toLowerCase() === newName.toLowerCase())) {\n      updatePerson(newName, newNumber);\n      // alert(`${newName} is already added to phonebook`);\n    } else {\n      const personObject = {\n        name: newName,\n        number: newNumber\n      }\n      personService\n        .create(personObject)\n        .then(response => {\n          console.log('response', response.data);\n          setPersons(persons.concat(response.data));\n          setNotificationMessage(`Added ${newName}`);\n          setMessageType(true);\n        })\n        .catch(error => {\n          // console.log(error.response.data.error);\n          setNotificationMessage(error.response.data.error);\n          setMessageType(false);\n        })\n        setTimeout(() => {\n          setNotificationMessage(null);\n        }, 5000);\n    }\n    setNewName('');\n    setNewNumber('');\n  }\n\n  const updatePerson = (newName, newNumber) => {\n    const updateConfirm = window.confirm(`${newName} is already added to the phonebook, replace old number with a new one?`);\n    if (updateConfirm) {\n      const updatedPersonId = persons.filter(person => person.name.toLowerCase() === newName.toLowerCase())[0].id;\n      const updatedPersonObject = {\n        name: newName,\n        number: newNumber\n      }\n      personService\n        .update(updatedPersonId, updatedPersonObject)\n        .then(response => {\n          setPersons(persons.map(p => p.id !== updatedPersonId ? p : response.data));\n          setNotificationMessage(`Updated ${newName} with new number ${newNumber}`);\n          setMessageType(true);\n        })\n        .catch(error => {\n          setNotificationMessage(`Information of ${newName} has already been removed from server`);\n          setMessageType(false);\n          setPersons(persons.filter(p => p.id !== updatedPersonId));\n        });\n      setTimeout(() => { setNotificationMessage(null); }, 5000);\n    }\n    setNewName('');\n    setNewNumber('');\n  }\n\n  const destroyPerson = person => {\n    const destroyConfirm = window.confirm(`Delete ${person.name}?`);\n    if (destroyConfirm) {\n      personService\n        .destroy(person.id)\n        .then(response => {\n          setPersons(persons.filter(p => p.id !== person.id));\n          setNotificationMessage(`Deleted ${person.name}`);\n          setMessageType(true);\n        })\n        .catch(error => {\n          setNotificationMessage(`Information of ${person.name} has already been removed from server`);\n          setMessageType(false);\n          setPersons(persons.filter(p => p.id !== person.id));\n        });\n      setTimeout(() => { setNotificationMessage(null); }, 5000);\n    }\n  }\n  \n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value);\n  }\n\n  const handleFilterTextChange = (event) => {\n    setFilterText(event.target.value);\n  }\n\n  const Persons = () => persons.map(person =>\n    <Person\n      key={person.id}\n      person={person}\n      filterText={filterText}\n      destroyPersonFunction={() => destroyPerson(person)}\n    />\n  );\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n\n      <Notification message={notificationMessage} messageType={messageType} />\n\n      <Filter filterText={filterText} handlerFunction={handleFilterTextChange} />\n      <h2>add a new</h2>\n      <PersonForm\n        addPerson={addPerson}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Persons />\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}